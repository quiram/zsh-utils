#!/usr/bin/env zsh

# Updates the current branch with the latest main value (in remote)

BUILD_SCRIPTS_DIR=$(dirname "$(readlink -f "$0")")
source "${BUILD_SCRIPTS_DIR}/../git/utils"

usage_and_exit() {
    echo "Usage: $0 [--safe] [--stash]"
    echo "    Updates the current branch with the latest main value (in remote)"
    echo "    --safe: (optional) run a full build after applying each commit"
    echo "    --stash: (optional) stash local changes prior to updating from main; pop them after successfully updating."
    exit 1
}

if [[ $# -gt 2 ]]; then
    usage_and_exit
fi

for option in "$@"; do
    case ${option} in
        "--safe")
            current_dir=$(pwd)
            update_options="--exec \"cd ${current_dir} run-full-build\""
            ;;
        "--stash")
            stash=1
            ;;
        *)
            usage_and_exit
            ;;
    esac
done

if [[ "${stash}" -eq 1 ]]; then
    log "Stashing current work..."
    git stash
fi

branch_name=$(branch-name)


# shellcheck disable=SC2154
if [[ "${branch_name}" = "${main}" ]]; then
    # shellcheck disable=SC2086
    rebase_if_remote
    result=$?
else
    # shellcheck disable=SC2154
    log "Rebasing from ${main} into ${branch_name}..."
    # shellcheck disable=SC2086
    git switch ${main} && rebase_if_remote && git switch "${branch_name}" && git rebase ${=update_options} ${main}
    result=$?
fi

if [[ "${stash}" -eq 1 ]]; then
    if [[ ${result} -eq 0 ]]; then
        log "Retrieving work from stash..."
        git stash pop
    else
        echo "Error updating from main, pre-existing work is still stashed."
    fi
fi

exit ${result}
